import{_ as r,B as o,o as t,c,j as n,a,G as e,w as l,a3 as i}from"./chunks/framework.C4orK2dt.js";const d="/docs/assets/20240718235044.BJpPydPG.png",b="/docs/assets/20240719000940.AaqeeIsA.png",u="/docs/assets/20240719002254.u4Gy80V3.png",h="/docs/assets/20240719005524.LT0QBIL-.png",m="/docs/assets/20240719090037.CM9xjR00.png",g="/docs/assets/20240721224800.B5Mb9MBG.png",_="/docs/assets/20240721225717.BLwqj9Zy.png",k="/docs/assets/20240721225844.Dr5K9ZDj.png",v="/docs/assets/20240721230843.BD3JDO48.png",y="/docs/assets/20240721230943.C2Bk9i5X.png",x="/docs/assets/20240721231711.BL7lZurI.png",C="/docs/assets/20240721231944.DaFNMvqj.png",P="/docs/assets/20240721232033.Z_xiU6nU.png",A="/docs/assets/20240722075241.DkCwAQuX.png",f="/docs/assets/20240722005450.DJVb2n4-.png",q="/docs/assets/20240722075815.CBFoBxfI.png",S=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"deploy_example/nacos_to_rnacos_doc/index.md","filePath":"zh/deploy_example/nacos_to_rnacos_doc/index.md","lastUpdated":1733968575000}'),O={name:"deploy_example/nacos_to_rnacos_doc/index.md"},T={class:"note custom-block github-alert"};function E(N,s,R,B,F,D){const p=o("VPNolebaseInlineLinkPreview");return t(),c("div",{"data-pagefind-body":!0},[s[9]||(s[9]=n("h2",{id:"_1-引言",tabindex:"-1"},[a("1. 引言 "),n("a",{class:"header-anchor",href:"#_1-引言","aria-label":'Permalink to "1. 引言"'},"​")],-1)),s[10]||(s[10]=n("p",null,"很多同学了解 r-nacos 特性后最开始只将 r-nacos 用于开发测试环境。",-1)),s[11]||(s[11]=n("p",null,"经过一段时间的使用后，部分同学有打算生产环境也从 nacos 迁移到r-nacos 。",-1)),s[12]||(s[12]=n("p",null,"一些之前使用 nacos 服务的同学了解 r-nacos 后打算从 nacos 迁移到 r-nacos。",-1)),s[13]||(s[13]=n("p",null,"那么如何平衡地从 nacos 迁移到 r-nacos 呢？",-1)),n("div",T,[s[2]||(s[2]=n("p",{class:"custom-block-title"},"提醒",-1)),s[3]||(s[3]=n("p",null,null,-1)),n("p",null,[e(p,{href:"https://github.com/nacos-group/r-nacos",target:"_blank",rel:"noreferrer"},{default:l(()=>s[0]||(s[0]=[a("r-nacos")])),_:1}),s[1]||(s[1]=a(" 简介："))]),s[4]||(s[4]=n("ul",null,[n("li",null,[n("p",null,"① r-nacos 是一个用 rust 实现的 nacos 服务。相较于 java nacos 来说，是一个提供相同功能，启动更快、占用系统资源更小（初始内存小于 10 M）、性能更高、运行更稳定的服务。")]),n("li",null,[n("p",null,"② r-nacos 设计上完全兼容最新版本 nacos 面向 client sdk 的协议（包含 1.x 的 http OpenApi，和 2.x 的 grpc 协议）, 支持使用 nacos 服务的应用平迁到 r-nacos 。")])],-1))]),s[14]||(s[14]=i('<h2 id="_2-迁移计划" tabindex="-1">2. 迁移计划 <a class="header-anchor" href="#_2-迁移计划" aria-label="Permalink to &quot;2. 迁移计划&quot;">​</a></h2><h3 id="_2-1-待迁移内容分析" tabindex="-1">2.1 待迁移内容分析 <a class="header-anchor" href="#_2-1-待迁移内容分析" aria-label="Permalink to &quot;2.1 待迁移内容分析&quot;">​</a></h3><p>迁移的目标已明确，在设计迁移计划前，我们需要先分析待迁移的数据。</p><p><img src="'+d+'" alt="" loading="lazy"></p><p>从nacos迁移到r-nacos主要涉及4类数据：</p><ol><li>nacos鉴权用户数据</li><li>命名空间数据</li><li>配置数据</li><li>服务实例数据</li></ol><p>nacos用户数据、命名空间数据与配置数据是持久化数据，需要事先完成设置与迁移。 服务实例数据是动态数据，切换后应该会自动注册，不需要事先迁移。</p><h3 id="_2-2-迁移阶段与步骤" tabindex="-1">2.2 迁移阶段与步骤 <a class="header-anchor" href="#_2-2-迁移阶段与步骤" aria-label="Permalink to &quot;2.2 迁移阶段与步骤&quot;">​</a></h3><p>我们可以把迁移分为3个阶段：</p><ol><li>迁移前准备阶段；</li><li>迁移阶段；</li><li>迁移后收尾阶段；</li></ol><p>一、迁移前准备</p><p><img src="'+b+'" alt="" loading="lazy"></p><ol><li>部署r-nacos,用于迁移前做数据迁移与数据录入。（如果nacos与r-nacos在同一台机器，可以用临时端口号启动r-nacos，等迁移时再更新端口号重启）</li><li>在r-nacos控制台录入应用依赖的用户信息，完成用户数据初始化。</li><li>在r-nacos控制台录入命名空间数据；</li><li>从nacos控制台按命名空间全量导出数据（每个命名空间会导出一个文件）；然后分别把这部分配置数据通过r-nacos控制台导入对应命名空间中，完成配置数据迁移。</li></ol><p>二、迁移中</p><p>数据迁移完成后即可开始切流迁移。</p><p><img src="'+u+'" alt="" loading="lazy"></p><p>把应用请求流量切到r-nacos中，这一步不同的场景需要用不同的处理方式：</p><div class="note custom-block github-alert"><p class="custom-block-title">提醒</p><p></p><ul><li>① 应用直接请求 nacos 服务场景：r-nacos 需要和 nacos 在同一个机器替换它；需要先关闭 nacos，再把 r-nacos 的端口改成原 nacos 端口启动，完成切换。</li><li>② 应用请求 nginx 后反向代理到 nacos 场景：更新 nginx 配置，把 nacos 反向代理地址更新为 r-nacos 地址，然后重新增加配置完成切换。</li></ul></div><p>切流迁移完成后，注意观察应用与r-nacos的表现是否符合预期。</p><div class="caution custom-block github-alert"><p class="custom-block-title">注意</p><p></p><p>就算目标是要开启鉴权，这个阶段 r-naocs 也不要启接口鉴权 (<code>RNACOS_ENABLE_OPEN_API_AUTH=false</code>)，以防应用使用原 nacos 分配旧 token 请求被拦截。</p></div><p>三、迁移后收尾</p><p><img src="'+h+'" alt="" loading="lazy"></p><p>完成迁移稳定运行一小段时间后，可以将nacos移除，只保留r-nacos。</p><p>如果需要对接口开启鉴权，则走以下操作：</p><div class="note custom-block github-alert"><p class="custom-block-title">提醒</p><p></p><ul><li>① 等应用旧 token 都过期(默认过期时间是 5 小时)都重新从 r-nacos 获取新 token 之后，再开启接口鉴权配置重启 r-nacos （r-nacos 可以秒级重启，应用几乎无感）。</li><li>② 也可以分批重启应用强行其使用 r-nacos token，之后再开启接口鉴权配置重启 r-nacos 。</li></ul></div><p>至此完成从nacos迁移到r-nacos</p><h2 id="_3-迁移案例" tabindex="-1">3. 迁移案例 <a class="header-anchor" href="#_3-迁移案例" aria-label="Permalink to &quot;3. 迁移案例&quot;">​</a></h2><p>前面讲的是迁移操作步骤可能比较抽象，这里再补充两个具体迁移场景案例让读者更有体感。</p><h3 id="_3-1-应用服务直链单节点nacos的场景迁移方案" tabindex="-1">3.1 应用服务直链单节点nacos的场景迁移方案 <a class="header-anchor" href="#_3-1-应用服务直链单节点nacos的场景迁移方案" aria-label="Permalink to &quot;3.1 应用服务直链单节点nacos的场景迁移方案&quot;">​</a></h3><p>部署图：</p><p><img src="'+m+'" alt="" loading="lazy"></p><p>nacos持久化内容:</p><p><img src="'+g+'" alt="" loading="lazy"></p><div class="note custom-block github-alert"><p class="custom-block-title">提醒</p><p></p><p>nacos 使用情况：</p><ul><li>① 在 10.0.24.9 部署一台 nacos ，使用默认端口号 8848，8948 提供服务。</li><li>② nacos 上设置两个命名空间 pre、prod 分别对预发、生产环境提供服务。</li><li>③ 有 3 个应用，每个应用 2 个实例使用 nacos 服务； 总共两套环境，其中一套环境共有 3 个配置文件，3 个服务，6 个实例。</li><li>④ 应用使用的用户名：<code>xxx_app_id</code> ,密码: <code>a07a6deb5e56</code></li></ul></div>',34)),n("p",null,[s[6]||(s[6]=a("目标：在同一台机器中部署r-nacos替换nacos提供服务，使用")),e(p,{href:"https://r-nacos.github.io/docs/notes/deploy_example/linux_systemd_deploy/",target:"_blank",rel:"noreferrer"},{default:l(()=>s[5]||(s[5]=[a("systemd方式部署")])),_:1})]),s[15]||(s[15]=i(`<h4 id="_3-1-1-迁移步骤——迁移前" tabindex="-1">3.1.1 迁移步骤——迁移前 <a class="header-anchor" href="#_3-1-1-迁移步骤——迁移前" aria-label="Permalink to &quot;3.1.1 迁移步骤——迁移前&quot;">​</a></h4><p><strong>步骤1</strong> 、 在10.0.24.9使用临时端口8858部署r-nacos。 这里假设使用linux systemd方式部署。具体部署方式参考r-nacos说明文档，这里不展开。 关键配置项如下：</p><div class="language-properties vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># r-nacos监听http端口，这里使用临时端口8858，后面切流时调整回来</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RNACOS_HTTP_PORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=8858</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># r-nacos监听grpc端口,grpc端口这里不配置，默认值：HTTP端口+1000</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># RNACOS_GRPC_PORT=9858</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># r-nacos独立控制台端口,这个没有端口冲突，可以直接使用正式端口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RNACOS_HTTP_CONSOLE_PORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=10848</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RNACOS_ENABLE_OPEN_API_AUTH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>注：如果是docker启动方式，配置端口不用改，只需改对应对外映射的端口号即可</p><p><strong>步骤2</strong> 、初始化用户信息 访问<code>http://10.0.24.9:10848/rnacos/</code>进入控制台。 增加应用依赖用户，用户名：<code>xxx_app_id</code> ,密码: \`a07a6deb5e56</p><p><img src="`+_+'" alt="" loading="lazy"></p><p><strong>步骤3</strong>、初始化命名空间</p><p>初始化命名空间 pre、prod</p><p><img src="'+k+'" alt="" loading="lazy"></p><p><strong>步骤4</strong>、迁移配置信息</p><ol><li>从nacos导出配置</li></ol><p><img src="'+v+'" alt="" loading="lazy"></p><p>分别导出pre、prod命名空间下的配置</p><p><img src="'+y+'" alt="" loading="lazy"></p><p>导出的文件名格式为：<code>nacos_config_export_20240721230938.zip</code></p><p>注意：每次导出后记得改下文件名增加命名空间标记，以防导入时选错文件。</p><ol start="2"><li>把配置导入r-nacos 分别把上一步nacos导出的配置文件包导出到r-nacos pre、prod命名空间下的配置。</li></ol><p>a) 进入r-nacos控制台-&gt;配置列表页,选择对应命名空间</p><p><img src="'+x+'" alt="" loading="lazy"></p><p>b) 上传导入配置文件</p><p><img src="'+C+'" alt="" loading="lazy"> 导入后： <img src="'+P+`" alt="" loading="lazy"></p><p>上面图中操作的是pre命名空间，prod命名空间也操作一遍，这里不展开。</p><h4 id="_3-1-2-迁移步骤——迁移中" tabindex="-1">3.1.2 迁移步骤——迁移中 <a class="header-anchor" href="#_3-1-2-迁移步骤——迁移中" aria-label="Permalink to &quot;3.1.2 迁移步骤——迁移中&quot;">​</a></h4><p><strong>步骤5</strong>、 完成数据初始化后关闭r-nacos，先把临时端口更新正式端口，方便后面可以直接启动r-nacos。</p><p>关闭r-nacos服务</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>systemctl stop rnacos</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>关键配置项如下：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>properties</span></span>
<span class="line"><span># r-nacos监听http端口</span></span>
<span class="line"><span>RNACOS_HTTP_PORT=8848</span></span>
<span class="line"><span># r-nacos监听grpc端口,grpc端口这里不配置，默认值：HTTP端口+1000</span></span>
<span class="line"><span># RNACOS_GRPC_PORT=9848</span></span>
<span class="line"><span># r-nacos独立控制台端口</span></span>
<span class="line"><span>RNACOS_HTTP_CONSOLE_PORT=10848</span></span>
<span class="line"><span># 切换过程中不开启接口鉴权</span></span>
<span class="line"><span>RNACOS_ENABLE_OPEN_API_AUTH=false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong>步骤6</strong>、关闭nacos</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 切换到nacos目录，执行以下命名关闭nacos</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./bin/shutdown.sh</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>步骤7</strong>、启动r-nacos</p><p>配置信息在关闭nacos前已准备好，直接启动r-nacos服务：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rnacos</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_3-1-3-迁移步骤——迁移后" tabindex="-1">3.1.3 迁移步骤——迁移后 <a class="header-anchor" href="#_3-1-3-迁移步骤——迁移后" aria-label="Permalink to &quot;3.1.3 迁移步骤——迁移后&quot;">​</a></h4><p><strong>步骤8</strong>、切流完成，观察应用与r-nacos确认其是否正常工作。</p><p>应用服务可通过上游应用页面访问看看是否正常。 r-nacos可能通过监控页面查询其是否被应用访问。</p><p><img src="`+A+`" alt="" loading="lazy"></p><p><strong>步骤9</strong>、开启r-nacos接口鉴权 （可选）</p><p>切流完成后过5个小时之后，开启r-nacos接口鉴权。</p><p>关键配置项如下：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>properties</span></span>
<span class="line"><span># r-nacos监听http端口</span></span>
<span class="line"><span>RNACOS_HTTP_PORT=8848</span></span>
<span class="line"><span># r-nacos监听grpc端口,grpc端口这里不配置，默认值：HTTP端口+1000</span></span>
<span class="line"><span># RNACOS_GRPC_PORT=9848</span></span>
<span class="line"><span># r-nacos独立控制台端口</span></span>
<span class="line"><span>RNACOS_HTTP_CONSOLE_PORT=10848</span></span>
<span class="line"><span># 开启接口鉴权</span></span>
<span class="line"><span>RNACOS_ENABLE_OPEN_API_AUTH=true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>重启r-nacos服务:</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rnacos</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>至此，完成从nacos到r-nacos的迁移</p><h3 id="_3-2-应用服务通过nginx链接nacos场景迁移方案" tabindex="-1">3.2 应用服务通过nginx链接nacos场景迁移方案 <a class="header-anchor" href="#_3-2-应用服务通过nginx链接nacos场景迁移方案" aria-label="Permalink to &quot;3.2 应用服务通过nginx链接nacos场景迁移方案&quot;">​</a></h3><p>部署图：</p><p><img src="`+f+`" alt="" loading="lazy"></p><p>nacos内容和前一个场景一样，部署时中间多用了nginx代理提供服务。</p><p>通过nginx链接nacos，那么切换时只需要把nginx配置中原nacos地址切换为r-naocs地址，然后通过 <code>nginx -s reload</code> 重新加载配置规则即可完成切流。</p><h4 id="_3-2-1-迁移步骤——迁移前" tabindex="-1">3.2.1 迁移步骤——迁移前 <a class="header-anchor" href="#_3-2-1-迁移步骤——迁移前" aria-label="Permalink to &quot;3.2.1 迁移步骤——迁移前&quot;">​</a></h4><p>步骤和前一个场景第1、2、3、4步一致，这里不展开。</p><h4 id="_3-2-2-迁移步骤——迁移中" tabindex="-1">3.2.2 迁移步骤——迁移中 <a class="header-anchor" href="#_3-2-2-迁移步骤——迁移中" aria-label="Permalink to &quot;3.2.2 迁移步骤——迁移中&quot;">​</a></h4><p><strong>步骤5</strong>、更新nginx配置，把原nacos地址切换为r-naocs地址。</p><p>原nginx配置</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>http {</span></span>
<span class="line"><span>    # nacos http , 走http反向代理</span></span>
<span class="line"><span>    server {</span></span>
<span class="line"><span>        listen       8848;</span></span>
<span class="line"><span>        listen  [::]:8848;</span></span>
<span class="line"><span>        server_name  localhost;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        location /nacos {</span></span>
<span class="line"><span>            proxy_pass http://10.0.24.9:8848;</span></span>
<span class="line"><span>            proxy_set_header Host $proxy_host;</span></span>
<span class="line"><span>            proxy_set_header  Connection &quot;&quot;;</span></span>
<span class="line"><span>            proxy_http_version  1.1;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>stream {</span></span>
<span class="line"><span>    # nacos grpc , 走tcp反向代理</span></span>
<span class="line"><span>    server {</span></span>
<span class="line"><span>        listen       9848;</span></span>
<span class="line"><span>        proxy_pass http://10.0.24.9:9848;</span></span>
<span class="line"><span>        proxy_connect_timeout 5s;</span></span>
<span class="line"><span>        proxy_timeout 20s;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>更新后的nginx配置</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>http {</span></span>
<span class="line"><span>    # nacos http , 走http反向代理</span></span>
<span class="line"><span>    server {</span></span>
<span class="line"><span>        listen       8848;</span></span>
<span class="line"><span>        listen  [::]:8848;</span></span>
<span class="line"><span>        server_name  localhost;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        location /nacos {</span></span>
<span class="line"><span>            proxy_pass http://10.0.24.9:8858;</span></span>
<span class="line"><span>            proxy_set_header Host $proxy_host;</span></span>
<span class="line"><span>            proxy_set_header  Connection &quot;&quot;;</span></span>
<span class="line"><span>            proxy_http_version  1.1;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>stream {</span></span>
<span class="line"><span>    # nacos grpc , 走tcp反向代理</span></span>
<span class="line"><span>    server {</span></span>
<span class="line"><span>        listen       9848;</span></span>
<span class="line"><span>        proxy_pass http://10.0.24.9:9858;</span></span>
<span class="line"><span>        proxy_connect_timeout 5s;</span></span>
<span class="line"><span>        proxy_timeout 20s;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>执行<code>nginx -s reload</code> 重新加载配置规则即可完成切流。</p><p>切换后：</p><p><img src="`+q+'" alt="" loading="lazy"></p><h4 id="_3-2-3-迁移步骤——迁移后" tabindex="-1">3.2.3 迁移步骤——迁移后 <a class="header-anchor" href="#_3-2-3-迁移步骤——迁移后" aria-label="Permalink to &quot;3.2.3 迁移步骤——迁移后&quot;">​</a></h4><p>步骤和前一个场景第8、9步一致，这里不展开。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>对于nacos迁移到r-nacos，分析待迁移数据项与划分好迁移各个阶段需要做的事项，可以设计出合适的迁移方案。</p><p>迁移可分在迁移前、迁移中、迁移后三个阶段，本文结合样例场景给出了较具体操作步骤。</p><p>如果上面的案例和自己的实际情况一致，可以考虑应用请求nacos前加一层nginx反向代理，之后再按案例2迁移即可。</p><hr><p>时间: 2024-07-22</p>',68)),n("p",null,[s[8]||(s[8]=a("作者: ")),e(p,{href:"https://github.com/heqingpan",target:"_blank",rel:"noreferrer"},{default:l(()=>s[7]||(s[7]=[a("heqingpan")])),_:1})])])}const w=r(O,[["render",E]]);export{S as __pageData,w as default};
