import{_ as r,B as o,o as p,c as h,a3 as l,j as e,a,G as i,w as t}from"./chunks/framework.C4orK2dt.js";const C=JSON.parse('{"title":"Cluster Deployment","description":"","frontmatter":{},"headers":[],"relativePath":"en/cluster_deploy/index.md","filePath":"en/cluster_deploy/index.md","lastUpdated":1738043441000}'),d={name:"en/cluster_deploy/index.md"};function c(u,s,k,g,m,F){const n=o("VPNolebaseInlineLinkPreview");return p(),h("div",{"data-pagefind-body":!0},[s[13]||(s[13]=l('<h1 id="cluster-deployment" tabindex="-1">Cluster Deployment <a class="header-anchor" href="#cluster-deployment" aria-label="Permalink to &quot;Cluster Deployment&quot;">​</a></h1><p>r-nacos has supported cluster deployment since version v0.3.0.</p><h2 id="overview-of-cluster-functionality" tabindex="-1">Overview of Cluster Functionality <a class="header-anchor" href="#overview-of-cluster-functionality" aria-label="Permalink to &quot;Overview of Cluster Functionality&quot;">​</a></h2><p>The primary goal of cluster deployment is to enable horizontal scaling of services through multi-instance deployment, ensure service continuity in the event of partial node failures, and enhance overall system stability.</p><h3 id="configuration-center" tabindex="-1">Configuration Center <a class="header-anchor" href="#configuration-center" aria-label="Permalink to &quot;Configuration Center&quot;">​</a></h3><p>The configuration center utilizes the raft cluster protocol combined with local storage to persist data, eliminating the dependency on MySQL for configuration storage. Its persistence mechanism is similar to that of <code>etcd</code>.</p><table tabindex="0"><thead><tr><th>Request Method</th><th>Description</th><th>Performance</th></tr></thead><tbody><tr><td>Write</td><td>Only the master node can handle write requests. Other nodes forward write requests to the master node.</td><td>The cluster achieves approximately 2,000 transactions per second (tps), with potential for optimization.</td></tr><tr><td>Read</td><td>Each node can read the complete dataset.</td><td>A single node achieves around 80,000 queries per second (qps), with the total cluster capacity being n * 80,000.</td></tr></tbody></table><h3 id="registration-center" tabindex="-1">Registration Center <a class="header-anchor" href="#registration-center" aria-label="Permalink to &quot;Registration Center&quot;">​</a></h3><p>The registration center employs a distor-like protocol to synchronize data across the cluster.</p><p>It reuses the node list information from the configuration center, although the protocols are implemented independently.</p><table tabindex="0"><thead><tr><th>Request Method</th><th>Description</th><th>Performance</th></tr></thead><tbody><tr><td>Write</td><td>Each node in the registration center is equal, with responsibilities divided by hash. Nodes can write to the services they are responsible for; otherwise, they forward requests to the appropriate node.</td><td>The cluster achieves around 10,000 tps.</td></tr><tr><td>Read</td><td>Each node can read the complete dataset.</td><td>A single node achieves approximately 30,000 qps, with the total cluster capacity being n * 30,000.</td></tr></tbody></table><h2 id="cluster-deployment-1" tabindex="-1">Cluster Deployment <a class="header-anchor" href="#cluster-deployment-1" aria-label="Permalink to &quot;Cluster Deployment&quot;">​</a></h2><p>The steps for cluster deployment are identical to those for single-node deployment, except for the runtime parameters, which include additional configurations for cluster nodes.</p><h3 id="_1-obtain-the-r-nacos-installation-package" tabindex="-1">1. Obtain the r-nacos Installation Package <a class="header-anchor" href="#_1-obtain-the-r-nacos-installation-package" aria-label="Permalink to &quot;1. Obtain the r-nacos Installation Package&quot;">​</a></h3>',14)),e("p",null,[s[1]||(s[1]=a("The method for obtaining the installation package is the same as described in ")),i(n,{href:"./../quick_started/"},{default:t(()=>s[0]||(s[0]=[a("Quick Start")])),_:1}),s[2]||(s[2]=a("."))]),s[14]||(s[14]=e("h3",{id:"_2-configure-cluster-rules",tabindex:"-1"},[a("2. Configure Cluster Rules "),e("a",{class:"header-anchor",href:"#_2-configure-cluster-rules","aria-label":'Permalink to "2. Configure Cluster Rules"'},"​")],-1)),s[15]||(s[15]=e("p",null,[a("There are four key configuration parameters for cluster deployment: "),e("code",null,"RNACOS_RAFT_NODE_ID"),a(", "),e("code",null,"RNACOS_RAFT_NODE_ADDR"),a(", "),e("code",null,"RNACOS_RAFT_AUTO_INIT"),a(", and "),e("code",null,"RNACOS_RAFT_JOIN_ADDR"),a(".")],-1)),e("p",null,[s[4]||(s[4]=a("For detailed parameter descriptions, refer to ")),i(n,{href:"./../env_config/"},{default:t(()=>s[3]||(s[3]=[a("Runtime Parameter Descriptions")])),_:1}),s[5]||(s[5]=a("."))]),s[16]||(s[16]=l(`<p>Cluster configuration rules:</p><ol><li>All cluster nodes must set <code>RNACOS_RAFT_NODE_ID</code> and <code>RNACOS_RAFT_NODE_ADDR</code>, ensuring that <code>node_id</code> and <code>node_addr</code> are unique for each node. <code>node_id</code> is a positive integer, and <code>node_addr</code> follows the format <code>ip:grpc_port</code>.</li><li>Master node: Initially set <code>RNACOS_RAFT_AUTO_INIT</code> to <code>true</code> (if the node is the first one, it defaults to <code>true</code> and does not require additional configuration).</li><li>Follower nodes: Initially set <code>RNACOS_RAFT_AUTO_INIT</code> to <code>false</code> (if the node is not the first one, it defaults to <code>false</code> and does not require additional configuration). Additionally, set <code>RNACOS_RAFT_JOIN_ADDR</code> to the address of the current master node to enable automatic cluster joining upon startup.</li><li>Points 2 and 3 are only relevant for initial cluster setup. Once the cluster is operational, subsequent configurations are loaded from the raft database.</li><li>The number of cluster nodes is flexible; it can be 1, 2, 3, 4, etc. However, the raft protocol only supports continued write operations if fewer than half of the cluster nodes are down (queries remain unaffected). For example, a 3-node cluster can tolerate one node failure, while a 2-node cluster can operate normally but cannot provide services if a node fails.</li><li>Follower nodes can be added dynamically as needed. For instance, a 3-node cluster can be expanded by adding 2 nodes after some time.</li></ol><h4 id="example-plan-cluster-node-information-and-write-corresponding-configuration-files" tabindex="-1">Example: Plan Cluster Node Information and Write Corresponding Configuration Files <a class="header-anchor" href="#example-plan-cluster-node-information-and-write-corresponding-configuration-files" aria-label="Permalink to &quot;Example: Plan Cluster Node Information and Write Corresponding Configuration Files&quot;">​</a></h4><p>Following the above rules, we will configure a 3-node cluster example.</p><p>Initial node information:</p><ol><li>Master node id is 1, address is 127.0.0.1:9848.</li><li>First follower node id is 2, address is 127.0.0.1:9849.</li><li>Second follower node id is 3, address is 127.0.0.1:9850.</li></ol><p>For production cluster deployment, it is recommended to set the log level to <code>warn</code>, which logs only alarms or exceptions, reducing the overall log volume.</p><p><strong>Configuration details:</strong></p><p>env01</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#file:env01 , Initialize with the leader node role</span></span>
<span class="line"><span>RUST_LOG=warn</span></span>
<span class="line"><span>RNACOS_HTTP_PORT=8848</span></span>
<span class="line"><span>RNACOS_RAFT_NODE_ADDR=127.0.0.1:9848</span></span>
<span class="line"><span>RNACOS_CONFIG_DB_DIR=db01</span></span>
<span class="line"><span>RNACOS_RAFT_NODE_ID=1</span></span>
<span class="line"><span>RNACOS_RAFT_AUTO_INIT=true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>env02:</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#file:env02 , Initialize with the follower node role</span></span>
<span class="line"><span>RUST_LOG=warn</span></span>
<span class="line"><span>RNACOS_HTTP_PORT=8849</span></span>
<span class="line"><span>RNACOS_RAFT_NODE_ADDR=127.0.0.1:9849</span></span>
<span class="line"><span>RNACOS_CONFIG_DB_DIR=db02</span></span>
<span class="line"><span>RNACOS_RAFT_NODE_ID=2</span></span>
<span class="line"><span>RNACOS_RAFT_JOIN_ADDR=127.0.0.1:9848</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>env03:</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#file:env03 , Initialize with the follower node role</span></span>
<span class="line"><span>RUST_LOG=warn</span></span>
<span class="line"><span>RNACOS_HTTP_PORT=8850</span></span>
<span class="line"><span>RNACOS_RAFT_NODE_ADDR=127.0.0.1:9850</span></span>
<span class="line"><span>RNACOS_CONFIG_DB_DIR=db03</span></span>
<span class="line"><span>RNACOS_RAFT_NODE_ID=3</span></span>
<span class="line"><span>RNACOS_RAFT_JOIN_ADDR=127.0.0.1:9848</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>Note:</strong> The addresses provided are for running multiple instances on the same machine. In a real-world scenario, replace them with the actual service IP and port.</p><h3 id="_3-starting-the-cluster" tabindex="-1">3. Starting the Cluster <a class="header-anchor" href="#_3-starting-the-cluster" aria-label="Permalink to &quot;3. Starting the Cluster&quot;">​</a></h3><h4 id="first-startup" tabindex="-1">First Startup <a class="header-anchor" href="#first-startup" aria-label="Permalink to &quot;First Startup&quot;">​</a></h4><p>To start the cluster, you need to run the three nodes separately. The master node must be started successfully before the slave nodes.</p><p>First, start the master node:</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nohup</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./rnacos</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env01</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> n01.log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Once the master node is up and running, you can start the slave nodes:</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nohup</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./rnacos</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env02</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> n02.log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nohup</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./rnacos</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env03</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> n03.log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Note that during this process, each node should run on a different server.</p><h4 id="cluster-restart" tabindex="-1">Cluster Restart <a class="header-anchor" href="#cluster-restart" aria-label="Permalink to &quot;Cluster Restart&quot;">​</a></h4><p>The configuration and startup process for restarting nodes is the same as the initial startup.</p><p>After the cluster is started, the node information is stored in the local database of each node. When a node restarts, it loads the cluster node information directly from this local database. At this point, there is no need to read the address of the cluster to join, and the <code>RNACOS_RAFT_JOIN_ADDR</code> parameter is no longer used (though leaving it in the configuration won&#39;t cause any issues).</p><p>For partial node restarts, the node will be re-added to the cluster within one heartbeat interval (0.5 seconds).</p><p>For a full cluster restart, Raft requires a 5-second silent period followed by a 3-second election timeout before re-electing the master node. The cluster will be fully operational and able to handle configuration write requests after about 10 seconds. During this time, configuration queries and read/write operations to the registry will continue to function normally.</p><h3 id="_4-running-applications-using-the-cluster" tabindex="-1">4. Running Applications Using the Cluster <a class="header-anchor" href="#_4-running-applications-using-the-cluster" aria-label="Permalink to &quot;4. Running Applications Using the Cluster&quot;">​</a></h3><p>Once the cluster service is up and running, you can proceed to run your existing Nacos applications.</p><h4 id="example-of-configuration-center-http-api" tabindex="-1">Example of Configuration Center HTTP API <a class="header-anchor" href="#example-of-configuration-center-http-api" aria-label="Permalink to &quot;Example of Configuration Center HTTP API&quot;">​</a></h4><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\\npublish config t001:contentTest to node 1&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -X</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POST</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;http://127.0.0.1:8848/nacos/v1/cs/configs&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;dataId=t001&amp;group=foo&amp;content=contentTest&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\\nget config info t001 from node 1, value:&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=t001&amp;group=foo&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\\nget config info t001 from node 2, value:&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;http://127.0.0.1:8849/nacos/v1/cs/configs?dataId=t001&amp;group=foo&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\\nget config info t001 from node 3, value:&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;http://127.0.0.1:8850/nacos/v1/cs/configs?dataId=t001&amp;group=foo&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\\npublish config t002:contentTest02 to node 2&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -X</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POST</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;http://127.0.0.1:8849/nacos/v1/cs/configs&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;dataId=t002&amp;group=foo&amp;content=contentTest02&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\\nget config info t002 from node 1, value:&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=t002&amp;group=foo&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\\nget config info t002 from node 2, value:&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;http://127.0.0.1:8849/nacos/v1/cs/configs?dataId=t002&amp;group=foo&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\\nget config info t002 from node 3, value:&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;http://127.0.0.1:8850/nacos/v1/cs/configs?dataId=t002&amp;group=foo&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h4 id="example-of-registry-http-api" tabindex="-1">Example of Registry HTTP API <a class="header-anchor" href="#example-of-registry-http-api" aria-label="Permalink to &quot;Example of Registry HTTP API&quot;">​</a></h4><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\\nregister instance nacos.test.001 to node 1&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -X</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POST</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;http://127.0.0.1:8848/nacos/v1/ns/instance&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;port=8000&amp;healthy=true&amp;ip=192.168.1.11&amp;weight=1.0&amp;serviceName=nacos.test.001&amp;groupName=foo&amp;metadata={&quot;app&quot;:&quot;foo&quot;,&quot;id&quot;:&quot;001&quot;}&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\\nregister instance nacos.test.001 to node 2&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -X</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POST</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;http://127.0.0.1:8849/nacos/v1/ns/instance&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;port=8000&amp;healthy=true&amp;ip=192.168.1.12&amp;weight=1.0&amp;serviceName=nacos.test.001&amp;groupName=foo&amp;metadata={&quot;app&quot;:&quot;foo&quot;,&quot;id&quot;:&quot;002&quot;}&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\\nregister instance nacos.test.001 to node 3&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -X</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POST</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;http://127.0.0.1:8850/nacos/v1/ns/instance&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;port=8000&amp;healthy=true&amp;ip=192.168.1.13&amp;weight=1.0&amp;serviceName=nacos.test.001&amp;groupName=foo&amp;metadata={&quot;app&quot;:&quot;foo&quot;,&quot;id&quot;:&quot;003&quot;}&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\\n\\nquery service instance nacos.test.001 from node 1, value:&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;http://127.0.0.1:8848/nacos/v1/ns/instance/list?&amp;namespaceId=public&amp;serviceName=foo%40%40nacos.test.001&amp;groupName=foo&amp;clusters=&amp;healthyOnly=true&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\\n\\nquery service instance nacos.test.001 from node 2, value:&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;http://127.0.0.1:8849/nacos/v1/ns/instance/list?&amp;namespaceId=public&amp;serviceName=foo%40%40nacos.test.001&amp;groupName=foo&amp;clusters=&amp;healthyOnly=true&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\\n\\nquery service instance nacos.test.001 from node 3, value:&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;http://127.0.0.1:8850/nacos/v1/ns/instance/list?&amp;namespaceId=public&amp;serviceName=foo%40%40nacos.test.001&amp;groupName=foo&amp;clusters=&amp;healthyOnly=true&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\\n&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>`,34)),e("p",null,[s[7]||(s[7]=a("If you are compiling the source code locally, you can use or refer to ")),i(n,{href:"https://github.com/heqingpan/rnacos/blob/master/test_cluster.sh",target:"_blank",rel:"noreferrer"},{default:t(()=>s[6]||(s[6]=[a("test_cluster.sh")])),_:1}),s[8]||(s[8]=a(" to create and test a cluster."))]),s[17]||(s[17]=e("p",null,"For specific usage, refer to the user guide on nacos.io.",-1)),e("p",null,[i(n,{href:"https://nacos.io/zh-cn/docs/sdk.html",target:"_blank",rel:"noreferrer"},{default:t(()=>s[9]||(s[9]=[a("JAVA-SDK")])),_:1})]),e("p",null,[i(n,{href:"https://nacos.io/zh-cn/docs/other-language.html",target:"_blank",rel:"noreferrer"},{default:t(()=>s[10]||(s[10]=[a("Other Languages")])),_:1})]),e("p",null,[i(n,{href:"https://nacos.io/zh-cn/docs/open-api.html",target:"_blank",rel:"noreferrer"},{default:t(()=>s[11]||(s[11]=[a("open-api")])),_:1})]),s[18]||(s[18]=l(`<h2 id="cluster-management-tools" tabindex="-1">Cluster Management Tools <a class="header-anchor" href="#cluster-management-tools" aria-label="Permalink to &quot;Cluster Management Tools&quot;">​</a></h2><h3 id="checking-cluster-status-via-console" tabindex="-1">Checking Cluster Status via Console <a class="header-anchor" href="#checking-cluster-status-via-console" aria-label="Permalink to &quot;Checking Cluster Status via Console&quot;">​</a></h3><p><img src="https://github.com/heqingpan/rnacos/raw/master/doc/assets/imgs/20230915000345.png" alt="" loading="lazy"></p><p>On the console page, the main focus is on the status of the cluster node list and ensuring the raft leader node is functioning properly.</p><h3 id="checking-cluster-status-via-api" tabindex="-1">Checking Cluster Status via API <a class="header-anchor" href="#checking-cluster-status-via-api" aria-label="Permalink to &quot;Checking Cluster Status via API&quot;">​</a></h3><ol><li>Query the raft cluster status of a specific node</li></ol><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;http://127.0.0.1:8848/nacos/v1/raft/metrics&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># {&quot;id&quot;:1,&quot;state&quot;:&quot;Leader&quot;,&quot;current_term&quot;:1,&quot;last_log_index&quot;:10,&quot;last_applied&quot;:10,&quot;current_leader&quot;:1,&quot;membership_config&quot;:{&quot;members&quot;:[1,2,3],&quot;members_after_consensus&quot;:null}}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Pay attention to current_leader and members</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="2"><li>Add a node</li></ol><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -X</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POST</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;http://127.0.0.1:8848/nacos/v1/raft/add-learner&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -H</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Content-Type: application/json&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;[2, &quot;127.0.0.1:9849&quot;]&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>It&#39;s recommended to set <code>RNACOS_RAFT_JOIN_ADDR</code> when launching a new node to join the cluster. If the leader node is uncertain during configuration, you can start the node first and then use the leader node&#39;s API to add the new node to the cluster.</p><p>This API can also be used to update cluster node addresses while the cluster is running.</p><ol start="3"><li>Update the cluster node list</li></ol><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -X</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POST</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;http://127.0.0.1:8848/nacos/v1/raft/change-membership&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -H</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Content-Type: application/json&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;[1, 2, 3]&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>If nodes are added manually, this API must be called to update the cluster node list.</p><p>This API can also be used to scale down the cluster and remove specific nodes.</p><h2 id="appendix-introduction" tabindex="-1">Appendix Introduction <a class="header-anchor" href="#appendix-introduction" aria-label="Permalink to &quot;Appendix Introduction&quot;">​</a></h2>`,16)),e("p",null,[i(n,{href:"https://www.cnblogs.com/shizioo/p/17710328.html",target:"_blank",rel:"noreferrer"},{default:t(()=>s[12]||(s[12]=[a("rnacos implements raft and distro-like protocols, supporting cluster deployment")])),_:1})])])}const f=r(d,[["render",c]]);export{C as __pageData,f as default};
