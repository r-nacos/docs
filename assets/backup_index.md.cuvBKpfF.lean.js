import{_ as e,o as s,c as i,a6 as n}from"./chunks/framework.-anpL5na.js";const u=JSON.parse('{"title":"数据备件与迁移管理","description":"","frontmatter":{},"headers":[],"relativePath":"backup/index.md","filePath":"zh/backup/index.md","lastUpdated":1733968575000}'),t={name:"backup/index.md"};function p(d,a,r,o,l,c){return s(),i("div",null,a[0]||(a[0]=[n('<h1 id="数据备件与迁移管理" tabindex="-1">数据备件与迁移管理 <a class="header-anchor" href="#数据备件与迁移管理" aria-label="Permalink to &quot;数据备件与迁移管理&quot;">​</a></h1><p>r-nacos运行时使用自定义的分布式文件存储，默认不太方便管理数据。</p><p>为了支持用户更方便的管理、使用r-nacos中数据，计划通过语言无关的中间数据文件做数据载体，间接支持r-nacos系统数据和通用数据库数据双向迁移。</p><h2 id="_1-数据备份" tabindex="-1">1. 数据备份 <a class="header-anchor" href="#_1-数据备份" aria-label="Permalink to &quot;1. 数据备份&quot;">​</a></h2><h3 id="_1-1-手动数据备份" tabindex="-1">1.1 手动数据备份 <a class="header-anchor" href="#_1-1-手动数据备份" aria-label="Permalink to &quot;1.1 手动数据备份&quot;">​</a></h3><p>管理在<code>控制台&gt;数据迁移页面</code>可以通过<code>导出数据</code>手动完成数据备份。</p><h3 id="_1-2-自动数据备份" tabindex="-1">1.2 自动数据备份 <a class="header-anchor" href="#_1-2-自动数据备份" aria-label="Permalink to &quot;1.2 自动数据备份&quot;">​</a></h3><p>1、通过设置备份数据接口token参数<code>RNACOS_BACKUP_TOKEN</code>的值,开启数据备份接口。备份数据token默认为空，也就是默认不启用。</p><p>2、数据备份http接口说明</p><p>接口路径</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /rnacos/backup</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>参数：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>token: 访问token,调用时参数要与r-nacos配置的参数RNACOS_BACKUP_TOKEN内容一致</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>调用示例：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> backup.data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;http://127.0.0.1:8848/rnacos/backup?token=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxx&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>3、设置定时任务定时调用备份接口进行数据备份</p><p>按自己使用场景设置，略。</p><h2 id="_2-数据恢复" tabindex="-1">2. 数据恢复 <a class="header-anchor" href="#_2-数据恢复" aria-label="Permalink to &quot;2. 数据恢复&quot;">​</a></h2><p>数据恢复是低频操作，需要管理在控制台手动操作。</p><p>管理在<code>控制台&gt;数据迁移页面</code>可以通过<code>导入数据</code>手动完成数据恢复。</p>',20)]))}const b=e(t,[["render",p]]);export{u as __pageData,b as default};
