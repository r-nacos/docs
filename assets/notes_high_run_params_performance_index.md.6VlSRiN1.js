import{_ as t,c as e,o as l,a6 as a}from"./chunks/framework.C8_IbLF-.js";const d="/docs/assets/1.BRelAk-c.png",s="/docs/assets/2.CuVejyG-.png",u=JSON.parse('{"title":"第一章：参数说明","description":"","frontmatter":{},"headers":[],"relativePath":"notes/high/run_params_performance/index.md","filePath":"notes/high/run_params_performance/index.md","lastUpdated":1710227504000}'),i={name:"notes/high/run_params_performance/index.md"},n=a(`<h1 id="第一章-参数说明" tabindex="-1">第一章：参数说明 <a class="header-anchor" href="#第一章-参数说明" aria-label="Permalink to &quot;第一章：参数说明&quot;">​</a></h1><h2 id="_1-1-概述" tabindex="-1">1.1 概述 <a class="header-anchor" href="#_1-1-概述" aria-label="Permalink to &quot;1.1 概述&quot;">​</a></h2><ul><li>同一个应用包需要支持不同场景，就需要支持设置自定义参数。</li><li>R-Nacos 运行参数支持通过<code>环境变量</code>，或指定<code>配置文件方式</code>设置，如果不设置则按默认参数运行。</li></ul><h2 id="_1-2-设置运行参数的方式" tabindex="-1">1.2 设置运行参数的方式 <a class="header-anchor" href="#_1-2-设置运行参数的方式" aria-label="Permalink to &quot;1.2 设置运行参数的方式&quot;">​</a></h2><h3 id="_1-2-1-通过环境变量设置参数" tabindex="-1">1.2.1 通过环境变量设置参数 <a class="header-anchor" href="#_1-2-1-通过环境变量设置参数" aria-label="Permalink to &quot;1.2.1 通过环境变量设置参数&quot;">​</a></h3><ul><li>示例：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RNACOS_HTTP_PORT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8848</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nohup</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./rnacos</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rnacos.log </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">2&gt;&amp;1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>注意⚠️：</p><ul><li>① 这种方式在自定义少量参数时比较方便。</li><li>② 这种方式比较适合 Docker Compose 的时候设置。</li></ul></blockquote><h3 id="_1-2-2-通过指定配置文件方式设置参数" tabindex="-1">1.2.2 通过指定配置文件方式设置参数 <a class="header-anchor" href="#_1-2-2-通过指定配置文件方式设置参数" aria-label="Permalink to &quot;1.2.2 通过指定配置文件方式设置参数&quot;">​</a></h3><ul><li>示例：</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 从0.3.0版本开始支持 -e env_file 运行参数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nohup</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./rnacos -e env_file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rnacos.log </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">2&gt;&amp;1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>注意⚠️：</p><ul><li>① 如果不指定文件时也会尝试从当前目录下 <code>.env</code> 文件加载配置参数。</li><li>② <code>.env</code> 文件内容的格式是 <code>KEY=VALUE</code> 的形式。</li></ul></blockquote><h2 id="_1-3-运行参数" tabindex="-1">1.3 运行参数 <a class="header-anchor" href="#_1-3-运行参数" aria-label="Permalink to &quot;1.3 运行参数&quot;">​</a></h2><ul><li>下面是目前全部的运行参数：</li></ul><table><thead><tr><th style="text-align:left;">参数KEY</th><th style="text-align:left;">内容描述</th><th style="text-align:left;">默认值</th><th style="text-align:left;">示例</th><th style="text-align:left;">开始支持的版本</th></tr></thead><tbody><tr><td style="text-align:left;">RNACOS_HTTP_PORT</td><td style="text-align:left;">rnacos监听http端口</td><td style="text-align:left;">8848</td><td style="text-align:left;">8848</td><td style="text-align:left;">0.1.x</td></tr><tr><td style="text-align:left;">RNACOS_GRPC_PORT</td><td style="text-align:left;">rnacos监听grpc端口</td><td style="text-align:left;">默认是 HTTP端口+1000</td><td style="text-align:left;">9848</td><td style="text-align:left;">0.1.x</td></tr><tr><td style="text-align:left;">RNACOS_HTTP_CONSOLE_PORT</td><td style="text-align:left;">r-nacos独立控制台端口</td><td style="text-align:left;">默认是 HTTP端口+2000;设置为0可不开启独立控制台</td><td style="text-align:left;">10848</td><td style="text-align:left;">0.4.x</td></tr><tr><td style="text-align:left;">RNACOS_CONSOLE_LOGIN_ONE_HOUR_LIMIT</td><td style="text-align:left;">r-nacos控制台登录1小时失败次数限制</td><td style="text-align:left;">默认是5,一个用户连续登陆失败5次，会被锁定1个小时</td><td style="text-align:left;">5</td><td style="text-align:left;">0.4.x</td></tr><tr><td style="text-align:left;">RNACOS_HTTP_WORKERS</td><td style="text-align:left;">http工作线程数</td><td style="text-align:left;">cpu核数</td><td style="text-align:left;">8</td><td style="text-align:left;">0.1.x</td></tr><tr><td style="text-align:left;">RNACOS_CONFIG_DB_FILE</td><td style="text-align:left;">配置中心的本地数据库文件地址【0.2.x后不在使用】</td><td style="text-align:left;">config.db</td><td style="text-align:left;">config.db</td><td style="text-align:left;">0.1.x</td></tr><tr><td style="text-align:left;">RNACOS_CONFIG_DB_DIR</td><td style="text-align:left;">配置中心的本地数据库sled文件夹, 会在系统运行时自动创建</td><td style="text-align:left;">nacos_db</td><td style="text-align:left;">nacos_db</td><td style="text-align:left;">0.2.x</td></tr><tr><td style="text-align:left;">RNACOS_RAFT_NODE_ID</td><td style="text-align:left;">节点id</td><td style="text-align:left;">1</td><td style="text-align:left;">1</td><td style="text-align:left;">0.3.0</td></tr><tr><td style="text-align:left;">RNACOS_RAFT_NODE_ADDR</td><td style="text-align:left;">节点地址Ip:GrpcPort,单节点运行时每次启动都会生效；多节点集群部署时，只取加入集群时配置的值</td><td style="text-align:left;">127.0.0.1:GrpcPort</td><td style="text-align:left;">127.0.0.1:9848</td><td style="text-align:left;">0.3.0</td></tr><tr><td style="text-align:left;">RNACOS_RAFT_AUTO_INIT</td><td style="text-align:left;">是否当做主节点初始化,(只在每一次启动时生效)</td><td style="text-align:left;">节点1时默认为true,节点非1时为false</td><td style="text-align:left;">true</td><td style="text-align:left;">0.3.0</td></tr><tr><td style="text-align:left;">RNACOS_RAFT_JOIN_ADDR</td><td style="text-align:left;">是否当做节点加入对应的主节点,LeaderIp:GrpcPort；只在第一次启动时生效</td><td style="text-align:left;">空</td><td style="text-align:left;">127.0.0.1:9848</td><td style="text-align:left;">0.3.0</td></tr><tr><td style="text-align:left;">RUST_LOG</td><td style="text-align:left;">日志等级:debug,info,warn,error;所有http,grpc请求都会打info日志,如果不观注可以设置为error减少日志量</td><td style="text-align:left;">info</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr></tbody></table><blockquote><p>注意⚠️：从 v0.3.0 开始，默认参数启动的节点会被当做只有一个节点，当前节点是主节点的集群部署，支持其它新增的从节点加入。</p></blockquote><h1 id="第二章-性能" tabindex="-1">第二章：性能 <a class="header-anchor" href="#第二章-性能" aria-label="Permalink to &quot;第二章：性能&quot;">​</a></h1><h2 id="_2-1-概述" tabindex="-1">2.1 概述 <a class="header-anchor" href="#_2-1-概述" aria-label="Permalink to &quot;2.1 概述&quot;">​</a></h2><ul><li>主要使用 goose 进行压测，压测项目在<a href="https://github.com/r-nacos/r-nacos/tree/master/loadtest" target="_blank" rel="noreferrer">这里</a>。</li></ul><h2 id="_2-2-性能压测结果和压测记录" tabindex="-1">2.2 性能压测结果和压测记录 <a class="header-anchor" href="#_2-2-性能压测结果和压测记录" aria-label="Permalink to &quot;2.2 性能压测结果和压测记录&quot;">​</a></h2><ul><li>性能压测结果：</li></ul><table><thead><tr><th style="text-align:left;">模块</th><th style="text-align:left;">场景</th><th style="text-align:left;">单节点qps/tps</th><th style="text-align:left;">集群qps/tps</th><th style="text-align:left;">总结/备注</th></tr></thead><tbody><tr><td style="text-align:left;">配置中心</td><td style="text-align:left;">配置写入,单机模式</td><td style="text-align:left;">1.76万</td><td style="text-align:left;">-</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">配置中心</td><td style="text-align:left;">配置写入,集群模式</td><td style="text-align:left;">1.76万</td><td style="text-align:left;">7.6千</td><td style="text-align:left;">集群写入压测是在同一台电脑运行3个节点,如果换成多个机器部署,tps应该还能有所提升。</td></tr><tr><td style="text-align:left;">配置中心</td><td style="text-align:left;">配置查询</td><td style="text-align:left;">8万</td><td style="text-align:left;">n*8万</td><td style="text-align:left;">集群的查询总qps是节点的倍数</td></tr><tr><td style="text-align:left;">注册中心</td><td style="text-align:left;">服务实例注册,http协议</td><td style="text-align:left;">1.2万</td><td style="text-align:left;">1.0万</td><td style="text-align:left;">注册中心单机模式与集群模式写入的性能一致</td></tr><tr><td style="text-align:left;">注册中心</td><td style="text-align:left;">服务实例注册,grpc协议</td><td style="text-align:left;">1.2万</td><td style="text-align:left;">1.2万</td><td style="text-align:left;">grpc协议压测工具没有支持，目前没有实际压测，理论不会比http协议低</td></tr><tr><td style="text-align:left;">注册中心</td><td style="text-align:left;">服务实例心跳,http协议</td><td style="text-align:left;">1.2万</td><td style="text-align:left;">1.0万</td><td style="text-align:left;">心跳是按实例计算和服务实例注册一致共享qps</td></tr><tr><td style="text-align:left;">注册中心</td><td style="text-align:left;">服务实例心跳,grpc协议</td><td style="text-align:left;">8万以上</td><td style="text-align:left;">n*8万</td><td style="text-align:left;">心跳是按请求链接计算,且不过注册中心处理线程,每个节点只需管理当前节点的心跳，集群总心跳qps是节点的倍数</td></tr><tr><td style="text-align:left;">注册中心</td><td style="text-align:left;">查询服务实例</td><td style="text-align:left;">3万</td><td style="text-align:left;">n*3万</td><td style="text-align:left;">集群的查询总qps是节点的倍数</td></tr></tbody></table><blockquote><p>注意⚠️： 具体结果和压测环境有关。</p></blockquote><ul><li>压测记录 --- 注册中心查询：</li></ul><p><img src="`+d+'" alt="img"></p><ul><li>压测记录 --- 配置中心查询（两个进程分别限流4万qps同时压测(共8万qps)，其中一个的压测记录）：</li></ul><p><img src="'+s+'" alt="img"></p><h2 id="_2-3-容量分析" tabindex="-1">2.3 容量分析 <a class="header-anchor" href="#_2-3-容量分析" aria-label="Permalink to &quot;2.3 容量分析&quot;">​</a></h2><h3 id="_2-3-1-配置中心" tabindex="-1">2.3.1 配置中心 <a class="header-anchor" href="#_2-3-1-配置中心" aria-label="Permalink to &quot;2.3.1 配置中心&quot;">​</a></h3><ul><li>① 配置中心的单机查询 8 万 qps，很高，又支持水平扩容；集群基本没有查询瓶颈。</li><li>② 配置中心所占用的内存和配置内存有关，在内存没有满前，基本没有瓶颈。</li><li>③ 配置中心集群写入时统一在主节点写入，写入可能有瓶颈；目前 1.5 千 tps，后面优化后应该能到 1 万 tps 以上。</li></ul><h3 id="_2-3-2-注册中心" tabindex="-1">2.3.2 注册中心 <a class="header-anchor" href="#_2-3-2-注册中心" aria-label="Permalink to &quot;2.3.2 注册中心&quot;">​</a></h3><ul><li>① 注册中心的单机查询 3 万 qps，比较高，又支持水平扩容；集群基本没有查询瓶颈。</li><li>② 注册中心所占用的内存和配置内存有关，在内存没有满前，基本没有瓶颈。</li><li>③ 注册中心集群写入时每个节点都要写一遍，整体集群的写入性能 tps 和单机理论上相当。</li><li>④ http 协议 (v1.x 版本) 和 grpc 协议 (v2.x) 的心跳维护机制不同；http 心跳是按实例计算和服务实例注册一致共享 qps,，grpc 的心跳是按请求链接计算且不过注册中心处理线程，所有这类协议理论支持的容量差别很大。</li></ul><h3 id="_2-3-3-注册中心集群注册容量推理" tabindex="-1">2.3.3 注册中心集群注册容量推理 <a class="header-anchor" href="#_2-3-3-注册中心集群注册容量推理" aria-label="Permalink to &quot;2.3.3 注册中心集群注册容量推理&quot;">​</a></h3><ul><li>① http 协议注册 + 心跳 qps 是 1 万，每个实例5秒钟一次心跳；理论上只能支持 5 万服务实例左右。</li><li>② grpc 协议，注册 qps 假设也是 1 万，心跳 qps 单实例 8 万，3 节点集群总心跳 24 万；如果平均一个应用实例 1 小时重连一次；支持注册的服务实例总数为：<code>60*60*10000</code> = 3600 万，心跳支持的链接实例总数为：<code>5*24</code>万 = 120 万个链接实例（和集群节点有关）。</li></ul><h2 id="_2-4-r-nacos-vs-java-nacos-性能压测对比-单机模式" tabindex="-1">2.4 R-Nacos VS Java-Nacos 性能压测对比（单机模式） <a class="header-anchor" href="#_2-4-r-nacos-vs-java-nacos-性能压测对比-单机模式" aria-label="Permalink to &quot;2.4 R-Nacos  VS Java-Nacos 性能压测对比（单机模式）&quot;">​</a></h2><h3 id="_2-4-1-压测环境与工具" tabindex="-1">2.4.1 压测环境与工具 <a class="header-anchor" href="#_2-4-1-压测环境与工具" aria-label="Permalink to &quot;2.4.1 压测环境与工具&quot;">​</a></h3><ul><li>压测环境和压测工具：</li></ul><table><thead><tr><th>压测工具</th><th>压测机器配置</th><th>QPS (每秒请求数)</th><th>备注</th></tr></thead><tbody><tr><td>wrk</td><td>macOS i7四核/16G</td><td>约 24450</td><td>单进程施压</td></tr><tr><td>goose</td><td>macOS i7四核/16G</td><td>约 17000</td><td>单进程加限流施压，输出比 wrk 低</td></tr><tr><td>wrk</td><td>macOS i7四核/16G</td><td>未提供具体数值</td><td>单进程施压请求，输出高于 goose</td></tr></tbody></table><blockquote><p>注意⚠️：</p><ul><li>① R-Nacos Server版本是 v0.1.1，而 Java-Nacos Server 版本是 2.1.0。</li><li>② 因 wrk，goose 暂时不支持 grpc 协议，暂时只压测 http 协议接口。</li></ul></blockquote><h3 id="_2-4-2-配置中心" tabindex="-1">2.4.2 配置中心 <a class="header-anchor" href="#_2-4-2-配置中心" aria-label="Permalink to &quot;2.4.2 配置中心&quot;">​</a></h3><ul><li>配置中心，不会频繁更新，写入不做压测：</li></ul><table><thead><tr><th>服务器类型</th><th>压测工具</th><th>QPS (每秒查询请求数)</th><th>备注</th></tr></thead><tbody><tr><td>R-Nacos</td><td>wrk</td><td>约 24,000</td><td>配置中心单机查询</td></tr><tr><td>Java-Nacos</td><td>wrk</td><td>约 7,700</td><td>配置中心单机查询</td></tr></tbody></table><h3 id="_2-4-3-注册中心" tabindex="-1">2.4.3 注册中心 <a class="header-anchor" href="#_2-4-3-注册中心" aria-label="Permalink to &quot;2.4.3 注册中心&quot;">​</a></h3><ul><li>注册中心的各个压测工具的结果：</li></ul><table><thead><tr><th>测试类型</th><th>测试项目</th><th>R-Nacos</th><th>Java-Nacos</th><th>备注</th></tr></thead><tbody><tr><td>naming 注册</td><td>1000 x 1个实例, 每秒200qps</td><td>单核CPU: 4.5% 左右</td><td>单核CPU: 17% 左右</td><td>-</td></tr><tr><td>naming 单查询</td><td>单查询性能</td><td>1.5万 QPS 左右</td><td>1.35万 QPS</td><td>-</td></tr><tr><td>wrk 查询</td><td>单个服务</td><td>1.65万 QPS</td><td>1.35万 QPS</td><td>-</td></tr><tr><td>goose 查询</td><td>1000个服务</td><td>1.5万 QPS</td><td>1万 QPS（前期可能更高）</td><td>前30秒稳定，之后可能受GC影响</td></tr><tr><td>naming 单注册</td><td>单注册服务</td><td>goose: 0.7万 QPS 左右（5万到7万实例数）</td><td>goose: 0.45万 QPS 左右（5万到7万实例数）</td><td>-</td></tr><tr><td>查询与注册混合</td><td>wrk 查询 + goose 注册</td><td>1.5万 QPS 查询 + 0.075万 QPS 注册（5千实例）</td><td>1.3万 QPS 查询 + 0.07万 QPS 注册（5千实例）</td><td>-</td></tr><tr><td></td><td></td><td>1.5万 QPS 查询 + 0.15万 QPS 注册（1万实例）</td><td>0.9万 QPS 查询 + 0.12万 QPS 注册（1万实例）</td><td>-</td></tr><tr><td></td><td>goose 查询 + goose 注册</td><td>1.3万 QPS 查询 + 0.13万 QPS 注册（1万实例）</td><td>1万 QPS 查询 + 0.08万 QPS 注册（1万实例）</td><td>前期能保持，后期QPS波动较大</td></tr></tbody></table><ul><li>从表格中可以看出，R-Nacos 在大多数测试项目中的性能表现优于 Java-Nacos，尤其是在 naming 单查询和查询与注册混合的场景下。此外，R-Nacos 在处理大量实例的 naming 单注册服务时，QPS 也显著高于 Java-Nacos。在 CPU 使用率方面，R-Nacos 在相同负载下也表现出更低的资源消耗。</li></ul><h3 id="_2-4-4-总结" tabindex="-1">2.4.4 总结 <a class="header-anchor" href="#_2-4-4-总结" aria-label="Permalink to &quot;2.4.4 总结&quot;">​</a></h3><ul><li><p><strong>R-Nacos 性能总结：</strong></p><ul><li>大部分接口的 QPS（每秒查询率）能够稳定在 1 万以上，除了服务注册接口，其性能稍逊，无法稳定在 1 万以上。</li><li>在多服务查询和注册的场景下，R-Nacos 的 QPS 能够稳定在大约 1.3 万左右。</li><li>综合 QPS 是 Java-Nacos 的 2 倍以上，显示出更高的性能。</li><li>在资源占用方面，线程数稳定在 7，CPU 使用率最大约为 200%（相当于使用 2 核 CPU），内存占用保持在 50MB 以下。</li></ul></li><li><p><strong>Java-Nacos 性能总结</strong>：</p><ul><li>查询接口的 QPS 基本能达到 1 万以上，但在高压力下性能不稳定，有较大的波动。降低压测流程后，QPS 可以相对平稳。</li><li>在相同的多服务查询和注册场景下，Java-Nacos 的 QPS下降明显，大约在 0.6 万左右，与 R-Nacos 相比有较大的性能差距。</li><li>资源占用方面，线程数最多可达 300 左右，CPU 使用率最大约为 500%，内存占用在 600 MB 到 900 MB 之间，显示出较高的资源消耗。</li></ul></li><li><p>综上所述，R-Nacos 在性能稳定性和资源占用方面相较于 Java-Nacos 有显著的优势。特别是在高并发场景下，R-Nacos 能够提供更稳定的服务，同时保持较低的资源消耗。而 Java-Nacos 虽然在某些情况下能够达到较高的 QPS，但其性能稳定性和资源管理方面的表现不如 R-Nacos。</p></li></ul>',49),r=[n];function o(h,g,c,p,f,x){return l(),e("div",null,r)}const _=t(i,[["render",o]]);export{u as __pageData,_ as default};
